# Lab2 traps

- backtrace

使用 `r_fp` 函数获取 frame pointer 寄存器 s0 的值. 该函数的返回值为 `uint64` 类型.

需要输出的返回地址的地址为 fp-8 ，强制类型转换为 `uint64*` 类型并解引用可得 return address . 同理可在 fp-16 地址处获取 previous fp .

用 `PGROUNDDOWN(fp)` 获取 frame pointer 所在页. 若当前 fp 所在页与 previous fp 不同，则说明看到了最后的 stack frame ，停止循环.

最后按照文档要求需要在 `panic` 中添加 `backtrace()` 函数.（一开始没加）

- alarm

- test0

增加 syscall sigalarm 和 sigreturn ，步骤和之前相同.

在 `proc` 结构体中添加域

```cpp
int alarm_period;
uint64 alarm_handler;
int is_handling;
int ticks_passed;
```

将 `sigalarm` 函数指定的 alarm 周期和 handler 函数指针存在进程对应的 `proc` 结构体中.

`is_handling` 表示是否正在执行 alarm_handler 对应的函数，如果是应当不重复调用.

`ticks_passed` 记录上次调用 handler 函数后经过的时刻数.

在 `alarmtest.c` 中找到了 `sigalarm(0, 0)` ，认为 `alarm_period` 为 0 时永远不用调用 handler 函数. 在 `proc.c/ allocproc()` 初始时这三个量的值均设为 0 .

在 `proc.c` 中，如果 `which_dev==2` ，说明是 timer interrupt ，将经过的时刻数 +1 ，如果等于 alarm 周期且该周期不为 0 （未设置 alarm ），则应调用 alarm handler 函数.

由于 `usertrapret` 会将 sepc 寄存器的值设为 `p->trapframe->epc` ，而 sret 会将 pc 设置为 sepc ，故需要调用 alarm handler 时只需将 `p->trapframe->epc` 设置为 `alarm_handler` .

此时观察到 alarmtest test0 输出了 "alarm!" .

- test1/2/3

在 `proc` 结构体中添加域

```cpp
struct trapframe *alarm_frame;
```

存储调用 alarm handler 之前被 interrupt 的程序的寄存器的值，并在 sigreturn 时还原.

类似分配 `trapframe` ，在 `kernel/proc.c alloc_proc` 函数中为 `alarm_frame` 分配一页.

在调用 alarm handler 函数前将 `is_handling` 设置为 1 ，将当前 `trapframe` 的内容复制到 `alarm_frame` 中保存在 `proc` 结构体中. 若 `is_handling` 已经为 1 ，则不重复执行 alarm handler ，保证了接下来机制的正确执行，可以正常回到 alarm handler 中断前的代码继续执行.

使用 `kernel/string.c` 中提供的 `void*
memmove(void *dst, const void *src, uint n)` 函数复制，三个参数分别为目标地址，源地址和长度，该函数将 `src` 开始的地址长度为 `n` 的数据复制到 `dst` 开始的地址. 这里的长度即 `sizeof(struct trapframe)` .

alarm handler 调用 `sigalarm()` 返回时，将之前保存的 `alarm_frame` 复制回 `trapframe` ，这样（再通过 `trampoline.S userret` ）保证了用户寄存器的值回到 alarm handler 前的状态，并将 `is_handling` 重新设置为 0 .

由于 `sigalarm()` 返回值不会被 alarm handler 用到，且返回值会存在 a0 寄存器中，故直接返回 `trapframe->a0` .

此时可以通过 alarmtest .

`usertests -q` 发现有页未被释放. 在 `kernel/proc.c freeproc()` 函数中类似释放 trapframe 添加释放 `alarm_frame` 的代码
```cpp
if(p->alarm_frame)
    kfree((void*)p->alarm_frame);
```
，则可通过测试.
